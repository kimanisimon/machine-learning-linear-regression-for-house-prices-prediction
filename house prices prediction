#This is a house pricing dataset that is used to predict house prices
#load the libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
#loading the dataset
df =pd.read_csv(r'C:\Users\nux\Documents\4.2 Notes\ML\Real estate.csv')
#display the first few rows of the dataset
df.head()
#displaying the last rows of the data
df.tail()
#basic information about the data
df.info()
#describing the data
df.describe()
###Data Cleaning
#check for duplicate

df.duplicated().sum()
# Checking for missing values
print(df.isnull().sum())
#print the column name followed by the unique values present in that column e.g string
for col in df.columns:
    if df[col].dtype=='object':
        print(col)
        print(df[col].unique())
df.shape
#Checking for outliers in numerical columns
numeric_cols = df.select_dtypes(include=np.number).columns
for col in numeric_cols:
    sns.boxplot(x=df[col])
    plt.title(col)
    plt.show()
### Explanatory Data Analysis(EDA)
#visualization
sns.pairplot(df,hue="Y house price of unit area")
#finding correlation among the variable

df.corr()
#plotting the correlation

corr = df.select_dtypes(include='number').corr()
plt.figure(figsize=(12,6))
sns.heatmap(corr,annot=True)
##Predictive analysis-Linear Regression
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,mean_absolute_error
#Split the Data,training and testing
X = df.drop(columns=['Y house price of unit area'])  # Features
y = df['Y house price of unit area']  # Target variable

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

#train the linear regression model
model=LinearRegression()
model.fit(X_train,y_train)
#make prediction on the test set
y_pred=model.predict(X_test)
#Evaluate the model
mse=mean_squared_error(y_test,y_pred)
mae=mean_absolute_error(y_test,y_pred)
rmse=np.sqrt(mse)

print(f"Mean Squeared Error(MSE):{mse}")
print(f"Mean Absolute Error(MAE):{mae}")
print(f"Root Mean Squeared Error(RMSE):{rmse}")
#Analyzing using random forest and decision tree 
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split, GridSearchCV
# Random Forest Regression
param_grid_rf = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20]
}
rf_model = RandomForestRegressor(random_state=42)
rf_grid = GridSearchCV(rf_model, param_grid_rf)
rf_model.fit(X_train,y_train)
#make prediction 
y_pred_rf=rf_model.predict(X_test)
#Evaluate the Random Forest model
mse_rf=mean_squared_error(y_test,y_pred_rf)
mae_rf=mean_absolute_error(y_test,y_pred_rf)
rmse_rf=np.sqrt(mse_rf)

print("Random Forest Model Perfomance:")
print(f"Mean Squeared Error(MSE):{mse_rf}")
print(f"Mean Absolute Error(MAE):{mae_rf}")
print(f"Root Mean Squeared Error(RMSE):{rmse_rf}")
#Train the Decision Tree Model
dt_model=DecisionTreeRegressor(random_state=42)
dt_model.fit(X_train,y_train)
#make prediction on the test set using Random Forest
y_pred_dt=dt_model.predict(X_test)
#Evaluate the Decision Tree model
mse_dt=mean_squared_error(y_test,y_pred_dt)
mae_dt=mean_absolute_error(y_test,y_pred_dt)
rmse_dt=np.sqrt(mse_dt)

print("\nDecision Tree Model Perfomance:")
print(f"Mean Squeared Error(MSE):{mse_dt}")
print(f"Mean Absolute Error(MAE):{mae_dt}")
print(f"Root Mean Squeared Error(RMSE):{rmse_dt}")
